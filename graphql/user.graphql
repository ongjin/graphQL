scalar Date

type Users_Temp {
  userNo: Int
  userId: String
  userPw: String
  userEmail: String
  userPhone: String
  userJadate: Date
  updateAt: Date
  userName: String
  tokenTemp: TokenTemp
}

type TokenTemp{
  userNo: Int
  userToken: String
}

type Query {
  getUsers(dbName: String = webkiosk): [Users_Temp]
  getU(dbName: String, limit: Int, current: Int): [Users_Temp]
  # getUsers: [Users_Temp!]
  getUser(userNo: Int!): Users_Temp
  # findOneBy({USER_NO: userNo}): [Users_Temp!]!
}

type Mutation {
  createUser(input: CreateUserInput!): ResultInterface
  deleteUser(userNo: Int!): Boolean!
  updateUser(input: UpdateUserInput!): ResultInterface

  multiPleDBInsert(accountId: Int!): Users_Temp
}


type ResultInterface {
  success: Boolean
  message: String
  data: Users_Temp
}

input CreateUserInput {
  userNo: Int
  userId: String
  userPw: String
  userName: String
  userEmail: String
  userPhone: String
}

input UpdateUserInput {
  userNo: Int
  userId: String
  userPw: String
  userEmail: String
  userPhone: String
  userName: String
}
